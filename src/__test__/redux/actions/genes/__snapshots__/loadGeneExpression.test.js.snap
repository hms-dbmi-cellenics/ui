// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loadGeneExpression action Dispatches appropriately on failure 1`] = `
{
  "payload": {
    "componentUuid": "asd",
    "experimentId": "1234",
    "genes": [
      "a",
      "b",
      "c",
    ],
  },
  "type": "genes/expressionLoading",
}
`;

exports[`loadGeneExpression action Dispatches appropriately on failure 2`] = `
{
  "payload": {
    "componentUuid": "asd",
    "error": [Error: random error!],
    "experimentId": "1234",
    "genes": [
      "a",
      "b",
      "c",
    ],
  },
  "type": "genes/expressionError",
}
`;

exports[`loadGeneExpression action Dispatches appropriately on success 1`] = `
[
  {
    "componentUuid": "asd",
    "experimentId": "1234",
    "genes": [
      "a",
      "b",
      "c",
    ],
  },
  {
    "componentUuid": "asd",
    "genes": [
      "geneA",
    ],
    "newGenes": {
      "orderedGeneNames": [
        "geneA",
      ],
      "rawExpression": {
        "datatype": undefined,
        "index": [],
        "mathjs": "SparseMatrix",
        "ptr": [
          0,
          0,
        ],
        "size": [
          1,
          1,
        ],
        "values": [],
      },
      "stats": {
        "rawMean": [
          1,
        ],
        "rawStdev": [
          0,
        ],
        "truncatedMax": [
          1,
        ],
        "truncatedMin": [
          1,
        ],
      },
      "truncatedExpression": {
        "datatype": undefined,
        "index": [],
        "mathjs": "SparseMatrix",
        "ptr": [
          0,
          0,
        ],
        "size": [
          1,
          1,
        ],
        "values": [],
      },
      "zScore": {
        "datatype": undefined,
        "index": [],
        "mathjs": "SparseMatrix",
        "ptr": [
          0,
          0,
        ],
        "size": [
          1,
          1,
        ],
        "values": [],
      },
    },
  },
]
`;

exports[`loadGeneExpression action Dispatches appropriately on unrun pipeline 1`] = `
{
  "payload": {
    "componentUuid": "asd",
    "experimentId": "1234",
    "genes": [
      "a",
      "b",
      "c",
    ],
  },
  "type": "genes/expressionLoading",
}
`;

exports[`loadGeneExpression action Dispatches appropriately on unrun pipeline 2`] = `
{
  "payload": {
    "componentUuid": "asd",
    "error": [Error: random error!],
    "experimentId": "1234",
    "genes": [
      "a",
      "b",
      "c",
    ],
  },
  "type": "genes/expressionError",
}
`;

exports[`loadGeneExpression action Does not send work for already loaded expression data. 1`] = `
[MockFunction] {
  "calls": [
    [
      "1234",
      {
        "downsampled": false,
        "genes": [
          "b",
          "c",
        ],
        "name": "GeneExpression",
      },
      [Function],
      [Function],
      {
        "timeout": 60,
      },
    ],
  ],
  "results": [
    {
      "type": "return",
      "value": Promise {},
    },
  ],
}
`;
