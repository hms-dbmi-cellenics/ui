name: Build and Deploy the UI
on:
  push:
    branches:
      - master
  release:
    types:
      - released
  pull_request:
    branches:
      - master
jobs:
  uncheck-integration-test:
    name: Mark integration test as not run
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - id: get-pr-body
        name: Get the current PR body
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: open

      - id: create-unchecked-pr-body
        name: Create unchecked PR body
        run: |-
          UNCHECKED_BODY=$(sed 's/- \[[Xx]\] Started end-to-end tests on the latest commit./- \[ \] Started end-to-end tests on the latest commit./' <<\EOF
          ${{ steps.get-pr-body.outputs.body }}
          EOF
          )

          UNCHECKED_BODY="${UNCHECKED_BODY//'%'/'%25'}"
          UNCHECKED_BODY="${UNCHECKED_BODY//$'\n'/'%0A'}"
          UNCHECKED_BODY="${UNCHECKED_BODY//$'\r'/'%0D'}"

          echo "Unchecked PR body"
          echo $UNCHECKED_BODY

          echo "::set-output name=body::$UNCHECKED_BODY"

      - id: uncheck-integration-checkbox
        name: Uncheck the integration checkbox
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: ${{ secrets.API_TOKEN_GITHUB }}
          head-branch-regex: ${{ github.head_ref }}
          lowercase-branch: false
          body-template: ${{  steps.create-unchecked-pr-body.outputs.body }}
          body-update-action: replace

  build:
    name: Build website
    runs-on: ubuntu-20.04
    env:
      CI: true
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v3

      - id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'

      - id: install
        name: Install dependencies
        run: |-
          echo "Running CI with "
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

          git config --global url."https://".insteadOf ssh://
          npm ci

      - id: test
        name: Run unit tests
        uses: mattallty/jest-github-action@v1
        env:
          AWS_DEFAULT_REGION: us-east-1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          test-command: 'npm run coverage'
          coverage-comment: false

      - id: upload-coverage
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

      - id: check-licenses
        name: Check licenses
        env:
          ALLOWED_LICENSES: "MIT;Apache-2.0;BSD-3-Clause;ISC;BSD-2-Clause;BSD;CC0-1.0;0BSD;Unlicense;(MIT AND Zlib);(Unlicense OR Apache-2.0);BSD-3-Clause OR MIT;(MIT OR Apache-2.0);CC-BY-4.0;Apache-Style;(Apache-2.0 OR MPL-1.1);WTFPL;(WTFPL OR MIT);EPL-1.0;(MIT AND BSD-3-Clause);(MIT OR CC0-1.0);Custom: https://github.com/aws-amplify/amplify-js"
          EXCLUDE_PACKAGES: "cartocolor@4.0.2;turf-jsts@1.2.3"
        run: |-
          npm install -g license-checker
          license-checker --production --json --onlyAllow="${ALLOWED_LICENSES}" --excludePackages="${EXCLUDE_PACKAGES}"

      - id: next-cache-seek
        name: Look up the Next.js build cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}

      - id: build
        name: Build project
        run: |-
          npm run build

      - id: upload-build-out
        name: Upload Next.js build output
        uses: actions/upload-artifact@v2
        with:
          name: next-build-out
          path: |
            .next/
            !.next/cache

      - id: send-to-slack
        name: Send failure notification to Slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_STATUS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: pipelines
          status: FAILED
          color: danger

  build-docker:
    name: Build Docker container
    runs-on: ubuntu-20.04
    needs: build
    outputs:
      ref-id: ${{ steps.ref.outputs.ref-id }}
      commit-sha: ${{ steps.ref.outputs.commit-sha }}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v3

      - id: download-build-out
        name: Download Next.js build output
        uses: actions/download-artifact@v2
        with:
          name: next-build-out
          path: .next/

      - id: ref
        name: Format docker tag and repository name.
        run: |-
          # This will take a ref like `refs/heads/master`
          # and turn it into `refs-heads-master`
          REF_ID=$(echo $GITHUB_REF | sed 's/\//-/g')
          echo "::set-output name=ref-id::$REF_ID"

          # the final tag is something like:
          # refs-heads-master-a4f8bc313dae
          # this is what we push to ECR
          # we will also take semver'd tags like `1.0.0` and use them for releases

          # In push & PR events we want the tag to contain the latest commit on the branch:
          # in push events, the latest commit of the master branch is GITHUB_SHA
          # in PR synch the latest commit of the branch is found in github.event.pull_request.head.sha instead

          if [ "${{ github.event_name }}" = "release" ] && [ "${{ github.event.action }}" = "released" ]; then
            COMMIT_SHA=""
            IMAGE_TAG="${REF_ID/refs-tags-/}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            IMAGE_TAG="$REF_ID-$COMMIT_SHA"
          else
            COMMIT_SHA=$GITHUB_SHA
            IMAGE_TAG="$REF_ID-$COMMIT_SHA"
          fi

          echo "::set-output name=commit-sha::$COMMIT_SHA"

          # IMAGE_TAG is used in the Build Docker Image step.
          # We can easily build the image-tag from REF_ID and COMMIT_SHA for non-production releases.
          # But we can not easily create the image tag for production releases, so we're bulding it here
          echo "::set-output name=image-tag::$IMAGE_TAG"

          # This will take a GitHub repo name like `hms-dbmi-cellenics/releases`
          # and turns it into `releases`. This will be the name of the
          # ECR repository.
          IMAGE_REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=repo-name::$IMAGE_REPO_NAME"

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: create-ecr-registry
        name: Create an ECR repository (if needed)
        # This will fail if the registry already exists, which is fine. If there is some other
        # error, the `push` step will fail instead.
        continue-on-error: true
        run: |-
          aws ecr create-repository --repository-name $REPO_NAME --image-tag-mutability IMMUTABLE
        env:
          REPO_NAME: ${{ steps.ref.outputs.repo-name }}

      - id: setup-buildx
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - id: build
        name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.image-tag) }}
          push: false
          load: true
          build-args: READONLY_API_TOKEN_GITHUB=${{ secrets.READONLY_API_TOKEN_GITHUB }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - id: push
        name: Push docker image to ECR
        run: |-
          echo Pushing image $IMAGE_NAME to ECR.
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.image-tag) }}

      - id: send-to-slack
        name: Send failure notification to Slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_STATUS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: pipelines
          status: FAILED
          color: danger

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-20.04
    needs: build-docker
    strategy:
      max-parallel: 1
      matrix:
        environment: ['production', 'staging', 'develop']
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v3

      - id: setup-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: install-yq
        name: Install yq for modifying the deployment spec.
        run: |-
          sudo wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      - id: fill-metadata
        name: Fill out a new HelmRelease resource
        run: |-
          DEPLOYMENT_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=deployment-name::$DEPLOYMENT_NAME"

          if [ "${{ matrix.environment }}" = "production" ]; then
            SANDBOX_ID="default"
            CHART_REF="master"
            KUBERNETES_ENV="production"
            IMAGE_TAG="${REF_ID/refs-tags-/}"
            IMAGE_GLOB="semver:>=0.0.0"
            REPLICA_COUNT="4"
          fi

          if [ "${{ matrix.environment }}" = "develop" ]; then
            SANDBOX_ID="default"
            CHART_REF="master"
            KUBERNETES_ENV="staging"
            IMAGE_TAG="$REF_ID-$COMMIT_SHA"
            IMAGE_GLOB="glob:$REF_ID-*"
            REPLICA_COUNT="2"
          fi

          if [ "${{ matrix.environment }}" = "staging" ]; then
            SANDBOX_ID="STAGING_SANDBOX_ID"
            CHART_REF="STAGING_CHART_REF"
            KUBERNETES_ENV="staging"
            IMAGE_TAG="$REF_ID-$COMMIT_SHA"
            IMAGE_GLOB="glob:$REF_ID-*"
            REPLICA_COUNT="1"
          fi

          echo "::set-output name=kubernetes-env::$KUBERNETES_ENV"

          yq w -d1 .flux.yaml metadata.name "$DEPLOYMENT_NAME" \
          | yq w -d1 - metadata.namespace "$DEPLOYMENT_NAME-$SANDBOX_ID" \
          | yq w -d0 - metadata.name "$DEPLOYMENT_NAME-$SANDBOX_ID" \
          | yq w -d0 - metadata.labels.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - metadata.labels.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - "metadata.annotations[filter.fluxcd.io/chart-image]" "$IMAGE_GLOB" \
          | yq w -d1 - spec.releaseName "$DEPLOYMENT_NAME" \
          | yq w -d1 - spec.chart.ref "$CHART_REF" \
          | yq w -d1 - spec.values.kubernetes.env "$KUBERNETES_ENV" \
          | yq w -d1 - spec.values.biomageCi.repo "$GITHUB_REPOSITORY" \
          | yq w -d1 - spec.values.biomageCi.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - spec.values.image.registry "${{ steps.login-ecr.outputs.registry }}" \
          | yq w -d1 - spec.values.image.repository "$DEPLOYMENT_NAME" \
          | yq w -d1 - spec.values.image.tag "$IMAGE_TAG" \
          | yq w -d1 - spec.values.replicaCount $REPLICA_COUNT \
          | yq w -d1 - spec.values.serviceAccount.iamRole "ui-role-$KUBERNETES_ENV" \
          > $DEPLOYMENT_NAME-without-host.yaml

          if [ "${{ matrix.environment }}" = "production" ]
          then
            yq w -d1 $DEPLOYMENT_NAME-without-host.yaml spec.values.service.additionalHosts "true" > $DEPLOYMENT_NAME.yaml
          else
            yq w -d1 $DEPLOYMENT_NAME-without-host.yaml spec.values.service.additionalHosts "false" > $DEPLOYMENT_NAME.yaml
          fi

          cat $DEPLOYMENT_NAME.yaml
        env:
          REF_ID: ${{ needs.build-docker.outputs.ref-id }}
          COMMIT_SHA: ${{ needs.build-docker.outputs.commit-sha }}

      - name: Push production/develop template to releases repo for deployment
        if: (matrix.environment == 'production' && github.event_name == 'release' && github.event.action == 'released') || (matrix.environment == 'develop' && github.event_name == 'push')
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: ${{ steps.fill-metadata.outputs.deployment-name }}.yaml
          destination_repo: ${{ github.repository_owner }}/releases
          destination_folder: ${{ steps.fill-metadata.outputs.kubernetes-env }}
          user_email: ci@biomage.net
          user_name: Biomage CI/CD

      - name: Change name of deployment file for staging deployment
        if: (github.event_name == 'pull_request' || github.event_name == 'push') && matrix.environment == 'staging'
        env:
          DEPLOYMENT_NAME: ${{ steps.fill-metadata.outputs.deployment-name }}
          REF_ID: ${{ needs.build-docker.outputs.ref-id }}
        run: |-
          mv $DEPLOYMENT_NAME.yaml $REF_ID.yaml

      - name: Push staging deployment template to releases
        if: (github.event_name == 'pull_request' || github.event_name == 'push') && matrix.environment == 'staging'
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: ${{ needs.build-docker.outputs.ref-id }}.yaml
          destination_repo: ${{ github.repository_owner }}/releases
          destination_folder: staging-candidates/${{ steps.fill-metadata.outputs.deployment-name }}
          user_email: ci@biomage.net
          user_name: 'Biomage CI/CD'

      - id: send-to-slack
        name: Send failure notification to Slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_STATUS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: pipelines
          status: FAILED
          color: danger

  ready-to-merge:
    name: Ready for merging
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - id: ready-to-merge
        name: Signal readiness to merge
        run: |-
          exit 0
